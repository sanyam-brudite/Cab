version: 2.1

executors:
  docker-executor:
    docker:
      - image: circleci/python:3.8
      - image: circleci/postgres:12.3

jobs:
  build:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            python -m venv venv
            . venv/bin/activate
            pip install -r cab_booking/requirements.txt
      - run:
          name: Build Docker image
          command: |
            docker build -t myapp:${CIRCLE_SHA1} -f cab_booking/Dockerfile .
      - run:
          name: Save Docker image to a tar file
          command: |
            docker save -o myapp_${CIRCLE_SHA1}.tar myapp:${CIRCLE_SHA1}
      - run:
          name: List files in project directory
          command: ls -l
      - persist_to_workspace:
          root: .
          paths:
            - myapp_${CIRCLE_SHA1}.tar

  push_to_ecr:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: .
      - run:
          name: Install AWS CLI
          command: pip install awscli
      - run:
          name: Load Docker image from tar file
          command: |
            docker load -i myapp_${CIRCLE_SHA1}.tar
      - run:
          name: Authenticate with ECR
          command: |
            aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ECR_ACCOUNT_URL}
      - run:
          name: Push Docker image to ECR
          command: |
            docker tag myapp:${CIRCLE_SHA1} ${AWS_ECR_ACCOUNT_URL}/myapp:${CIRCLE_SHA1}
            docker push ${AWS_ECR_ACCOUNT_URL}/myapp:${CIRCLE_SHA1}

  deploy:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - run:
          name: Install AWS CLI
          command: pip install awscli
      - run:
          name: Deploy to ECS
          command: |
            aws ecs update-service --cluster my-cluster --service my-service --force-new-deployment

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build
      - push_to_ecr:
          requires:
            - build
      - hold:
          type: approval
          requires:
            - push_to_ecr
      - deploy:
          requires:
            - hold
